group_by(sub_area) %>%
summarize(mean_price_raion = mean(price_doc)) %>%
right_join(train,by="sub_area")
train$mean_price_raion
unique(train$mean_price_raion)
train <- train %>% filter(year >= 2013) %>%
group_by(sub_area) %>%
summarize(mean_price_persqm_raion = mean(price_doc/full_sq, na.rm=T)) %>%
right_join(train,by="sub_area")
cor(train$mean_price_raion,train$mean_price_persqm_raion)
train <- train %>% group_by(sub_area) %>% mutate(price_rank_raion = rank(mean_price_persqm_raion))
test <- train %>% group_by(sub_area) %>% summarize(price_rank_raion = mean(price_rank_raion)) %>% select(sub_area,price_rank_raion) %>% right_join(test, by="sub_area")
test$price_rank_raion
unique(test$price_rank_raion)
hist(train$mean_price_persqm_raion)
macro <- read.csv("../input/macro.csv")
macro <- macro %>% mutate(year_quarter = str_c(year(timestamp),quarter(timestamp),sep="_"))
sample_submission <- read.csv("../input/sample_submission.csv")
id_test = test$id
train <- train %>% filter(year>2011) %>% group_by(product_type, year_month) %>% mutate(price_doc_norm = (price_doc-mean(price_doc,na.rm=T))/sd(price_doc,na.rm=T)) %>% ungroup()
y_train <- train$price_doc_norm
train$product_type <- as.factor(train$product_type)
x_train <- select(train, -c(id, timestamp, price_doc, price_doc_norm, price_persqm, mean_price_raion, mean_price_persqm_raion, price_doc2, full_sq2, appartment_price, appartment_name, strange_build_year, n, year, year_quarter, build_year))
x_test <- subset(test, select = -c(id, timestamp, price_doc, appartment_name, strange_build_year, n, year, year_quarter, build_year))
colnames(x_train)
x_train <- select(train, -c(id, timestamp, price_doc, price_doc_norm, price_persqm, mean_price_raion, mean_price_persqm_raion, price_doc2, full_sq2, appartment_price, appartment_name, strange_build_year, n, year, year_quarter, build_year, year_month))
x_test <- subset(test, select = -c(id, timestamp, price_doc, appartment_name, strange_build_year, n, year, year_quarter, build_year, year_month))
len_train <- nrow(x_train)
len_test <- nrow(x_test)
train_test <- bind_rows(x_train, x_test)
features <- colnames(train_test)
for (f in features) {
if ((class(train_test[[f]])=="factor") || (class(train_test[[f]])=="character")) {
#cat("VARIABLE : ",f,"\n")
levels <- unique(train_test[[f]])
train_test[[f]] <- as.numeric(factor(train_test[[f]], levels=levels))
}
if (class(train_test[[f]])=="Date"){
train_test[[f]]<-as.numeric(train_test[[f]])
}
}
x_train = train_test[1:len_train,]
x_test = train_test[(len_train+1):(len_train+len_test),]
# #add time-based features
#
# tmp <- macro %>% group_by(year_quarter) %>% summarize(m_rent_price1=mean(rent_price_1room_eco),m_rent_price2=mean(rent_price_2room_eco),m_rent_price3=mean(rent_price_3room_eco)) %>% mutate(year_quarter=as.numeric(factor(year_quarter))-6) %>% filter(year_quarter>=1)
# x_train <- x_train %>% left_join(tmp, by="year_quarter")
# x_test <- x_test %>% left_join(tmp, by="year_quarter")
# remove direct time info
x_train <- x_train %>% select(-year_month)
dtrain = xgb.DMatrix(as.matrix(x_train), label=y_train)
dtest = xgb.DMatrix(as.matrix(x_test))
xgb_params = list(
seed = 0,
colsample_bytree = 0.7,
subsample = 1,
eta = 0.1,
objective = 'reg:linear',
max_depth = 5,
num_parallel_tree = 1,
min_child_weight = 1,
base_score = 15.8123
)
res = xgb.cv(xgb_params,
dtrain,
nrounds=2000,
nfold=5,
early_stopping_rounds=50,
print_every_n = 10,
verbose= 1,
maximize=F,
prediction=TRUE)
xgb_params = list(
seed = 0,
colsample_bytree = 0.7,
subsample = 1,
eta = 0.2,
objective = 'reg:linear',
max_depth = 5,
num_parallel_tree = 1,
min_child_weight = 1,
base_score = 15.8123
)
res = xgb.cv(xgb_params,
dtrain,
nrounds=2000,
nfold=5,
early_stopping_rounds=50,
print_every_n = 10,
verbose= 1,
maximize=F,
prediction=TRUE)
best_nrounds = res$best_iteration
gbdt = xgb.train(xgb_params, dtrain, best_nrounds)
gbdt = xgb.train(xgb_params, dtrain, best_nrounds)
prediction <- predict(gbdt,dtest)
cat(mean(prediction))
ggplot(data.frame(p=prediction), aes(x=p)) + geom_density()+geom_density(data=train, aes(x=price_doc_norm), color="red")
ggplot(data.frame(p=prediction), aes(x=p)) + geom_density()+geom_density(data=train, aes(x=price_doc_norm), color="red")
imp_matrix_all <- xgb.importance(colnames(dtrain),gbdt)
ggplot(head(imp_matrix_all,50),aes(x=reorder(Feature,Gain),y=Gain))+geom_bar(stat="identity")+coord_flip(ylim=c(0,0.4))+theme_bw()+labs(x="")
ggplot(head(imp_matrix_all,50),aes(x=reorder(Feature,Gain),y=Gain))+geom_bar(stat="identity")+coord_flip(ylim=c(0,0.4))+theme_bw()+labs(x="")
colnames(dtrain)
train2 <- train %>% bind_cols(data.frame(pred=res$pred)) %>% mutate(set="train")
train2 %>% ggplot(aes(x=price_doc_norm,y=pred))+geom_point()+geom_abline(slope=1,intercept=0, color="darkred")+facet_grid(product_type~year)
train2 %>% ggplot(aes(x=pred))+stat_density(geom="line", color="darkgreen")+facet_grid(product_type~year)+stat_density(aes(x=price_doc_norm),geom="line", color="darkred")
train2 %>% group_by(product_type, year_month) %>% summarize(mean(price_doc_norm),mean(pred))
train2 %>% ggplot(aes(x=(year_month), y=pred, color=product_type))+geom_line(stat="summary", size=1.5)+theme(axis.text.x = element_text(angle=-45))+geom_line(data=train, aes(x=year_month, y=price_doc_norm, group=product_type), stat="summary", alpha=0.2, size=1)+theme_bw()
train2 %>% ggplot(aes(x=(year), y=pred, color=product_type))+geom_line(stat="summary", size=1.5)+theme(axis.text.x = element_text(angle=-45))+geom_line(data=train, aes(x=year, y=price_doc_norm, group=product_type), stat="summary", alpha=0.2, size=1)+theme_bw()
train <- train %>% filter(year>2012) %>% group_by(product_type, year_month) %>% mutate(price_doc_norm = (price_doc-mean(price_doc,na.rm=T))/sd(price_doc,na.rm=T)) %>% ungroup()
y_train <- train$price_doc_norm
train$product_type <- as.factor(train$product_type)
x_train <- select(train, -c(id, timestamp, price_doc, price_doc_norm, price_persqm, mean_price_raion, mean_price_persqm_raion, price_doc2, full_sq2, appartment_price, appartment_name, strange_build_year, n, year, year_quarter, build_year, year_month))
x_test <- subset(test, select = -c(id, timestamp, price_doc, appartment_name, strange_build_year, n, year, year_quarter, build_year, year_month))
len_train <- nrow(x_train)
len_test <- nrow(x_test)
train_test <- bind_rows(x_train, x_test)
features <- colnames(train_test)
for (f in features) {
if ((class(train_test[[f]])=="factor") || (class(train_test[[f]])=="character")) {
#cat("VARIABLE : ",f,"\n")
levels <- unique(train_test[[f]])
train_test[[f]] <- as.numeric(factor(train_test[[f]], levels=levels))
}
if (class(train_test[[f]])=="Date"){
train_test[[f]]<-as.numeric(train_test[[f]])
}
}
x_train = train_test[1:len_train,]
x_test = train_test[(len_train+1):(len_train+len_test),]
# #add time-based features
#
# tmp <- macro %>% group_by(year_quarter) %>% summarize(m_rent_price1=mean(rent_price_1room_eco),m_rent_price2=mean(rent_price_2room_eco),m_rent_price3=mean(rent_price_3room_eco)) %>% mutate(year_quarter=as.numeric(factor(year_quarter))-6) %>% filter(year_quarter>=1)
# x_train <- x_train %>% left_join(tmp, by="year_quarter")
# x_test <- x_test %>% left_join(tmp, by="year_quarter")
dtrain = xgb.DMatrix(as.matrix(x_train), label=y_train)
dtest = xgb.DMatrix(as.matrix(x_test))
xgb_params = list(
seed = 0,
colsample_bytree = 0.7,
subsample = 1,
eta = 0.2,
objective = 'reg:linear',
max_depth = 5,
num_parallel_tree = 1,
min_child_weight = 1,
base_score = 15.8123
)
res = xgb.cv(xgb_params,
dtrain,
nrounds=2000,
nfold=5,
early_stopping_rounds=50,
print_every_n = 10,
verbose= 1,
maximize=F,
prediction=TRUE)
best_nrounds = res$best_iteration
#best_nrounds = 145
gbdt = xgb.train(xgb_params, dtrain, best_nrounds)
prediction <- predict(gbdt,dtest)
cat(mean(prediction))
ggplot(data.frame(p=prediction), aes(x=p)) + geom_density()+geom_density(data=train, aes(x=price_doc_norm), color="red")
imp_matrix_all <- xgb.importance(colnames(dtrain),gbdt)
ggplot(head(imp_matrix_all,50),aes(x=reorder(Feature,Gain),y=Gain))+geom_bar(stat="identity")+coord_flip(ylim=c(0,0.4))+theme_bw()+labs(x="")
train2 <- train %>% bind_cols(data.frame(pred=res$pred)) %>% mutate(set="train")
train2 %>% ggplot(aes(x=price_doc_norm,y=pred))+geom_point()+geom_abline(slope=1,intercept=0, color="darkred")+facet_grid(product_type~year)
train2 %>% ggplot(aes(x=pred))+stat_density(geom="line", color="darkgreen")+facet_grid(product_type~year)+stat_density(aes(x=price_doc_norm),geom="line", color="darkred")
train2 %>% group_by(product_type, year_month) %>% summarize(mean(price_doc_norm),mean(pred))
train2 %>% ggplot(aes(x=(year_month), y=pred, color=product_type))+geom_line(stat="summary", size=1.5)+theme(axis.text.x = element_text(angle=-45))+geom_line(data=train, aes(x=year_month, y=price_doc_norm, group=product_type), stat="summary", alpha=0.2, size=1)+theme_bw()
train2 %>% ggplot(aes(x=(year), y=pred, color=product_type))+geom_line(stat="summary", size=1.5)+theme(axis.text.x = element_text(angle=-45))+geom_line(data=train, aes(x=year, y=price_doc_norm, group=product_type), stat="summary", alpha=0.2, size=1)+theme_bw()
test2 <- test %>% bind_cols(data.frame(pred=prediction)) %>% mutate(set="test")
full2 <- bind_rows(train2, test2)
ggplot(full2,aes(x=full_sq,y=pred, color=set))+geom_point(stat="summary")+facet_grid(product_type~.)
ggplot(full2,aes(x=year_month,y=pred, color=set))+geom_point(stat="summary")+facet_grid(product_type~.)
ggplot(full2, aes(x=pred))+geom_density()+facet_grid(product_type~.)
tmp<-train %>% filter(year==2013) %>% group_by(product_type) %>% summarize(m=mean(price_doc),sd=sd(price_doc))
tmp
mean(tmp$m)
test2 <- test2 %>% left_join(tmp, by="product_type")
test2 <- test2 %>% mutate(pred2 = pred*sd+m)
sample_submission$price_doc <- test2$pred2
mean(sample_submission$price_doc)
mean(test2$pred)
mean(test2$pred2)
mean(test2$pred)
tmp
write.csv(sample_submission, "XGB_R_output2.csv", row.names = F)
library(data.table)
library(dplyr)
library(ggplot2)
library(knitr)
library(stringr)
library(DT)
orders <- fread('../input/orders.csv')
products <- fread('../input/products.csv')
order_products <- fread('../input/order_products__train.csv')
order_products_prior <- fread('../input/order_products__prior.csv')
aisles <- fread('../input/aisles.csv')
departments <- fread('../input/departments.csv')
options(tibble.width = Inf)
kable(head(orders,12))
glimpse(orders)
kable(head(order_products,10))
glimpse(order_products)
kable(head(products,10))
glimpse(products)
kable(head(order_products_prior,10))
glimpse(order_products_prior)
kable(head(aisles,10))
glimpse(aisles)
kable(head(departments,10))
glimpse(departments)
orders <- orders %>% mutate(order_hour_of_day = as.numeric(order_hour_of_day), eval_set = as.factor(eval_set))
products <- products %>% mutate(product_name = as.factor(product_name))
aisles <- aisles %>% mutate(aisle = as.factor(aisle))
departments <- departments %>% mutate(department = as.factor(department))
orders %>%
ggplot(aes(x=order_hour_of_day)) +
geom_histogram(stat="count",fill="red")
orders %>%
ggplot(aes(x=order_dow)) +
geom_histogram(stat="count",fill="red")
orders %>%
ggplot(aes(x=days_since_prior_order)) +
geom_histogram(stat="count",fill="red")
orders %>% filter(eval_set=="prior") %>% count(order_number) %>% ggplot(aes(order_number,n)) + geom_line(color="red", size=1)+geom_point(size=2, color="red")
order_products %>%
group_by(order_id) %>%
summarize(n_items = last(add_to_cart_order)) %>%
ggplot(aes(x=n_items))+
geom_histogram(stat="count",fill="red") +
geom_rug()+
coord_cartesian(xlim=c(0,80))
order_products_prior %>%
group_by(order_id) %>%
summarize(n_items = last(add_to_cart_order)) %>%
ggplot(aes(x=n_items))+
geom_histogram(stat="count",fill="red") +
geom_rug() +
coord_cartesian(xlim=c(0,80))
tmp <- order_products %>%
group_by(product_id) %>%
summarize(count = n()) %>%
top_n(10, wt = count) %>%
left_join(select(products,product_id,product_name),by="product_id") %>%
arrange(desc(count))
kable(tmp)
tmp %>%
ggplot(aes(x=reorder(product_name,-count), y=count))+
geom_bar(stat="identity",fill="red")+
theme(axis.text.x=element_text(angle=90, hjust=1),axis.title.x = element_blank())
tmp <- order_products %>%
group_by(reordered) %>%
summarize(count = n()) %>%
mutate(reordered = as.factor(reordered)) %>%
mutate(proportion = count/sum(count))
kable(tmp)
tmp %>%
ggplot(aes(x=reordered,y=count,fill=reordered))+
geom_bar(stat="identity")
tmp <-order_products %>%
group_by(product_id) %>%
summarize(proportion_reordered = mean(reordered), n=n()) %>%
filter(n>40) %>%
top_n(10,wt=proportion_reordered) %>%
arrange(desc(proportion_reordered)) %>%
left_join(products,by="product_id")
kable(tmp)
tmp %>%
ggplot(aes(x=reorder(product_name,-proportion_reordered), y=proportion_reordered))+
geom_bar(stat="identity",fill="red")+
theme(axis.text.x=element_text(angle=90, hjust=1),axis.title.x = element_blank())+coord_cartesian(ylim=c(0.85,0.95))
tmp <- order_products %>%
group_by(product_id, add_to_cart_order) %>%
summarize(count = n()) %>% mutate(pct=count/sum(count)) %>%
filter(add_to_cart_order == 1, count>10) %>%
arrange(desc(pct)) %>%
left_join(products,by="product_id") %>%
select(product_name, pct, count) %>%
ungroup() %>%
top_n(10, wt=pct)
kable(tmp)
tmp %>%
ggplot(aes(x=reorder(product_name,-pct), y=pct))+
geom_bar(stat="identity",fill="red")+
theme(axis.text.x=element_text(angle=90, hjust=1),axis.title.x = element_blank())+coord_cartesian(ylim=c(0.4,0.7))
order_products %>%
left_join(orders,by="order_id") %>%
group_by(days_since_prior_order) %>%
summarize(mean_reorder = mean(reordered)) %>%
ggplot(aes(x=days_since_prior_order,y=mean_reorder))+
geom_bar(stat="identity",fill="red")
order_products %>%
group_by(product_id) %>%
summarize(proportion_reordered = mean(reordered), n=n()) %>%
ggplot(aes(x=n,y=proportion_reordered))+
geom_point()+
geom_smooth(color="red")+
coord_cartesian(xlim=c(0,2000))
products
head(products)
str_detect(str_to_lower(products$product_name),'organic')
sum(str_detect(str_to_lower(products$product_name),'organic'))
sum(str_detect(products$product_name,'organic'))
sum(str_detect(products$product_name,'Organic'))
install.packages(c("curl", "DBI", "dplyr", "evaluate", "ggExtra", "quantmod", "R6", "rgdal", "rmarkdown", "shinyjs", "sp", "visNetwork", "XML"))
devtools::install_github("Microsoft/LightGBM", subdir = "R-package")
install.packages("devtools")
devtools::install_github("Microsoft/LightGBM", subdir = "R-package")
devtools::install_github("Microsoft/LightGBM", subdir = "R-package")
devtools::install_github("Microsoft/LightGBM", subdir = "R-package")
devtools::install_github("Microsoft/LightGBM@v1", subdir = "R-package")
devtools::install_github("Microsoft/LightGBM", subdir = "R-package")
devtools::install_github("Laurae2/lgbdl")
lgb.dl(commit = "master",
compiler = "gcc",
repo = "https://github.com/Microsoft/LightGBM",
cores = 4)
library(lgbdl)
lgb.dl(commit = "master",
compiler = "gcc",
repo = "https://github.com/Microsoft/LightGBM",
cores = 4)
lgb.dl(commit = "master",
compiler = "gcc",
repo = "https://github.com/Microsoft/LightGBM",
cores = 4)
lgb.dl(commit = "master",
repo = "https://github.com/Microsoft/LightGBM",
cores = 4)
lgb.dl(commit = "master",
repo = "https://github.com/Microsoft/LightGBM",
cores = 4)
lgb.dl(commit = "master",
repo = "https://github.com/Microsoft/LightGBM",
cores = 4)
lgb.dl(commit = "master",
repo = "https://github.com/Microsoft/LightGBM",
cores = 4)
lgb.dl(commit = "master",
repo = "https://github.com/Microsoft/LightGBM",
cores = 4)
lgb.dl(commit = "master",
repo = "https://github.com/Microsoft/LightGBM",
cores = 4, compiler="gcc")
lgb.dl(commit = "master",
repo = "https://github.com/Microsoft/LightGBM",
cores = 4, compiler="gcc")
rm(list=ls())
gc()
library(data.table)
library(dplyr)
library(tidyr)
setwd("D:/Eigene Dateien/sonstiges/Kaggle/instacart/scripts")
print("Mean F1 Score for use with XGBoost")
xgb_eval_f1 <- function (yhat, dtrain) {
require(ModelMetrics)
y = getinfo(dtrain, "label")
dt <- data.table(user_id=val_user_id, purch=y, pred=yhat)
dt <- dt %>% group_by(user_id) %>% mutate(f1score=f1Score(purch, pred, cutoff=0.2))
f1 <- mean(dt$f1score,na.rm=T)
return (list(metric = "f1", value = f1))
}
# Load Data ---------------------------------------------------------------
path <- "../input"
aisles <- fread(file.path(path, "aisles.csv"))
departments <- fread(file.path(path, "departments.csv"))
opp <- fread(file.path(path, "order_products__prior.csv"))
opt <- fread(file.path(path, "order_products__train.csv"))
ord <- fread(file.path(path, "orders.csv"))
products <- fread(file.path(path, "products.csv"))
# Reshape data ------------------------------------------------------------
aisles$aisle <- as.factor(aisles$aisle)
departments$department <- as.factor(departments$department)
ord$eval_set <- as.factor(ord$eval_set)
products$product_name <- as.factor(products$product_name)
products <- products %>%
inner_join(aisles) %>% inner_join(departments) %>%
select(-aisle_id, -department_id)
rm(aisles, departments)
opt$user_id <- ord$user_id[match(opt$order_id, ord$order_id)]
# join products with order info
op <- ord %>% inner_join(opp, by = "order_id")
rm(opp)
gc()
# Products ----------------------------------------------------------------
prd <- op %>%
arrange(user_id, order_number, product_id) %>%
group_by(user_id, product_id) %>%
mutate(product_time = row_number()) %>%
ungroup() %>%
group_by(product_id) %>%
summarise(
prod_orders = n(),
prod_reorders = sum(reordered),
prod_first_orders = sum(product_time == 1),
prod_second_orders = sum(product_time == 2)
)
prd$prod_reorder_probability <- prd$prod_second_orders / prd$prod_first_orders
prd$prod_reorder_times <- 1 + prd$prod_reorders / prd$prod_first_orders
prd$prod_reorder_ratio <- prd$prod_reorders / prd$prod_orders
prd <- prd %>% select(-prod_reorders, -prod_first_orders, -prod_second_orders)
rm(products)
gc()
# Users -------------------------------------------------------------------
users <- ord %>%
filter(eval_set == "prior") %>%
group_by(user_id) %>%
summarise(
user_orders = max(order_number),
user_period = sum(days_since_prior_order, na.rm = T),
user_mean_days_since_prior = mean(days_since_prior_order, na.rm = T)
)
us <- op %>%
group_by(user_id) %>%
summarise(
user_total_products = n(),
user_reorder_ratio = sum(reordered == 1) / sum(order_number > 1),
user_distinct_products = n_distinct(product_id)
)
users <- users %>% inner_join(us)
users$user_average_basket <- users$user_total_products / users$user_orders
us <- ord %>%
filter(eval_set != "prior") %>%
select(user_id, order_id, eval_set,
time_since_last_order = days_since_prior_order)
users <- users %>% inner_join(us)
rm(us)
gc()
# Database ----------------------------------------------------------------
data <- op %>%
group_by(user_id, product_id) %>%
summarise(
up_orders = n(),
up_first_order = min(order_number),
up_last_order = max(order_number),
up_average_cart_position = mean(add_to_cart_order))
rm(op, ord)
data <- data %>%
inner_join(prd, by = "product_id") %>%
inner_join(users, by = "user_id")
data$up_order_rate <- data$up_orders / data$user_orders
data$up_orders_since_last_order <- data$user_orders - data$up_last_order
data$up_order_rate_since_first_order <- data$up_orders / (data$user_orders - data$up_first_order + 1)
data <- data %>%
left_join(opt %>% select(user_id, product_id, reordered),
by = c("user_id", "product_id"))
rm(opt, prd, users)
gc()
# Train / Test datasets ---------------------------------------------------
traindata <- as.data.frame(data[data$eval_set == "train",])
val_users <- sample(unique(traindata$user_id), size = 1000, replace = FALSE)
train <- traindata[!traindata$user_id %in% val_users,]
train_user_id <- train$user_id
val <- traindata[traindata$user_id %in% val_users,]
val_user_id <- val$user_id
rm(traindata)
varnames <- setdiff(colnames(train), c("user_id","order_id","eval_set", "product_id"))
train <- train[,varnames]
val <- val[,varnames]
train$reordered[is.na(train$reordered)] <- 0
val$reordered[is.na(val$reordered)] <- 0
test <- as.data.frame(data[data$eval_set == "test",])
varnames <- setdiff(colnames(test), c("user_id","eval_set","reordered"))
test <- test[,varnames]
rm(data)
gc()
# Model -------------------------------------------------------------------
library(xgboost)
dtrain <- xgb.DMatrix(data=data.matrix(select(train,-reordered)), label=train$reordered)
rm(train)
dval <- xgb.DMatrix(data=data.matrix(select(val,-reordered)), label=val$reordered)
rm(val)
watchlist <- list(dval=dval)
params <- list(booster="gbtree"
,objective="reg:logistic"
,eval_metric=xgb_eval_f1
,eta=0.1
,gamma=0.7
,max_depth=6
,subsample=0.76
,colsample_bytree=0.95
,base_score=0.2
,lambda=10
,nthread=8
,alpha=2e-05
)
model <- xgb.train(data = dtrain, params = params, watchlist = watchlist, nrounds = 15)
importance <- xgb.importance(colnames(dtrain), model = model)
xgb.ggplot.importance(importance)
rm(X, importance)
gc()
# Apply model -------------------------------------------------------------
dtest <- xgb.DMatrix(as.matrix(select(test,-order_id,-product_id)))
test$reordered <- predict(model, dtest)
test$reordered <- (test$reordered > 0.2) * 1
submission <- test %>%
filter(reordered == 1) %>%
group_by(order_id) %>%
summarise(
products = paste(product_id, collapse = " ")
)
missing <- data.frame(
order_id = unique(test$order_id[!test$order_id %in% submission$order_id]),
products = "None"
)
submission <- submission %>% bind_rows(missing) %>% arrange(order_id)
write.csv(submission, file = "submit.csv", row.names = F)
submission
submission
head(submission)
