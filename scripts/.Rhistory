train$price_doc2[match(errors$id,train$id)]<-errors$price_doc
train$price_doc[match(errors$id,train$id)]<-errors$price_doc
# 111111112 extreme price
train$price_doc[train$id==2121]<-train$price_doc[train$id==2121]/10
train <- train %>% mutate(price_persqm = price_doc/full_sq)
# life_sq 37.8 full_sq 0
test$full_sq[test$id == 30938] <- test$life_sq[test$id == 30938]
# other in same building with 3 rooms and 41 life_sq
test$full_sq[test$id == 35857] <- 78
# swapped life_sq and full_sq
test$full_sq[test$id == 33278] <- 33.8
test$life_sq[test$id == 33278] <- 14.8
# 403.0 instead of 40.3
test$full_sq[test$id == 35108] <- test$full_sq[test$id == 35108]/10
### train full_sq < life_sq
# 7478 -> 76
train$life_sq[train$id==13549]<-76
# full 82 life 802
train$life_sq[train$id==9649]<-82
train$life_sq[train$id==1866]<-18
train$life_sq[train$id==22788]<-63.7
train <- train %>% mutate(life_sq=ifelse(life_sq/3>full_sq,life_sq/10, life_sq))
### test full_sq < life_sq
test <- test %>% mutate(life_sq=ifelse(life_sq/3>full_sq,life_sq/10, life_sq))
#### fix kitch_sq
train <- train %>% mutate(kitch_sq=ifelse(kitch_sq>123, 0, kitch_sq))
train <- train %>% mutate(kitch_sq=ifelse(kitch_sq>=full_sq, 0, full_sq*0.13))
test <- test %>% mutate(kitch_sq=ifelse(kitch_sq>123, 0, kitch_sq))
test <- test %>% mutate(kitch_sq=ifelse(kitch_sq>=full_sq, 0, full_sq*0.13))
#arrange(train,desc(price_persqm)) %>% select(id,price_persqm, price_doc,price_doc2, full_sq, full_sq2, product_type, year, appartment_name, appartment_price, n, everything()) %>% View()
#arrange(train,desc(price_persqm)) %>% select(id,price_persqm, price_doc,price_doc2, full_sq, full_sq2, product_type, year, appartment_name, appartment_price, n, everything()) %>% View()
train %>% ggplot(aes(x=year, y=full_sq))+geom_line(stat="summary", color="red")+geom_point(stat="summary", size=3, color="red")
#data.frame(t(sort(cor(train[sapply(train, is.numeric)])[,"year"],decreasing=T))) %>% gather() %>% ggplot(aes(x=reorder(key,value),y=value))+geom_bar(stat="identity")+coord_flip()
re_investment =
train %>%
filter(product_type=='Investment',timestamp>='2011-10-01') %>%
group_by(ts=substring(timestamp,1,7)) %>%
summarise(n=n(),
n1M=sum(ifelse(price_doc<=1000000,1,0))/n(),
n2M=sum(ifelse(price_doc==2000000,1,0))/n(),
n3M=sum(ifelse(price_doc==3000000,1,0))/n())
m1=floor(mean(re_investment$n1M[re_investment$ts>='2015-01'])/2*nrow(filter(train, product_type=='Investment',timestamp>='2011-10-01'))) #undersampling by magic numbers
m2=floor(mean(re_investment$n2M[re_investment$ts>='2015-01'])/3*nrow(filter(train, product_type=='Investment',timestamp>='2011-10-01'))) #undersampling by magic numbers
m3=floor(mean(re_investment$n3M[re_investment$ts>='2015-01'])/2*nrow(filter(train, product_type=='Investment',timestamp>='2011-10-01')))
train<-train %>% ungroup()
set.seed(1)
i1 = train %>% filter(price_doc<=1000000,product_type=='Investment') %>% sample_n(m1)
i2 = train %>% filter(price_doc==2000000,product_type=='Investment') %>% sample_n(m2)
i3 = train %>% filter(price_doc==3000000,product_type=='Investment') %>% sample_n(m3)
train = train %>% filter(!(price_doc<=1000000 & product_type=='Investment'))
train = train %>% filter(!(price_doc==2000000 & product_type=='Investment'))
train = train %>% filter(!(price_doc==3000000 & product_type=='Investment'))
train = rbind(train,i1,i2,i3) %>% arrange(id)
test <- test %>% mutate(product_type=as.character(product_type))
test <- test %>% mutate(product_type = ifelse(is.na(product_type) & build_year>2016,"OwnerOccupier",product_type)) # OwnerOccupier
test <- test %>% mutate(product_type = ifelse(is.na(product_type),"Investment",product_type)) # Investment
test <- test %>% mutate(product_type = as.factor(product_type))
train <- train %>% filter(year >= 2013) %>%
group_by(sub_area) %>%
summarize(mean_price_raion = mean(price_doc)) %>%
right_join(train,by="sub_area")
train$mean_price_raion
unique(train$mean_price_raion)
train <- train %>% filter(year >= 2013) %>%
group_by(sub_area) %>%
summarize(mean_price_persqm_raion = mean(price_doc/full_sq, na.rm=T)) %>%
right_join(train,by="sub_area")
cor(train$mean_price_raion,train$mean_price_persqm_raion)
train <- train %>% group_by(sub_area) %>% mutate(price_rank_raion = rank(mean_price_persqm_raion))
test <- train %>% group_by(sub_area) %>% summarize(price_rank_raion = mean(price_rank_raion)) %>% select(sub_area,price_rank_raion) %>% right_join(test, by="sub_area")
test$price_rank_raion
unique(test$price_rank_raion)
hist(train$mean_price_persqm_raion)
macro <- read.csv("../input/macro.csv")
macro <- macro %>% mutate(year_quarter = str_c(year(timestamp),quarter(timestamp),sep="_"))
sample_submission <- read.csv("../input/sample_submission.csv")
id_test = test$id
train <- train %>% filter(year>2011) %>% group_by(product_type, year_month) %>% mutate(price_doc_norm = (price_doc-mean(price_doc,na.rm=T))/sd(price_doc,na.rm=T)) %>% ungroup()
y_train <- train$price_doc_norm
train$product_type <- as.factor(train$product_type)
x_train <- select(train, -c(id, timestamp, price_doc, price_doc_norm, price_persqm, mean_price_raion, mean_price_persqm_raion, price_doc2, full_sq2, appartment_price, appartment_name, strange_build_year, n, year, year_quarter, build_year))
x_test <- subset(test, select = -c(id, timestamp, price_doc, appartment_name, strange_build_year, n, year, year_quarter, build_year))
colnames(x_train)
x_train <- select(train, -c(id, timestamp, price_doc, price_doc_norm, price_persqm, mean_price_raion, mean_price_persqm_raion, price_doc2, full_sq2, appartment_price, appartment_name, strange_build_year, n, year, year_quarter, build_year, year_month))
x_test <- subset(test, select = -c(id, timestamp, price_doc, appartment_name, strange_build_year, n, year, year_quarter, build_year, year_month))
len_train <- nrow(x_train)
len_test <- nrow(x_test)
train_test <- bind_rows(x_train, x_test)
features <- colnames(train_test)
for (f in features) {
if ((class(train_test[[f]])=="factor") || (class(train_test[[f]])=="character")) {
#cat("VARIABLE : ",f,"\n")
levels <- unique(train_test[[f]])
train_test[[f]] <- as.numeric(factor(train_test[[f]], levels=levels))
}
if (class(train_test[[f]])=="Date"){
train_test[[f]]<-as.numeric(train_test[[f]])
}
}
x_train = train_test[1:len_train,]
x_test = train_test[(len_train+1):(len_train+len_test),]
# #add time-based features
#
# tmp <- macro %>% group_by(year_quarter) %>% summarize(m_rent_price1=mean(rent_price_1room_eco),m_rent_price2=mean(rent_price_2room_eco),m_rent_price3=mean(rent_price_3room_eco)) %>% mutate(year_quarter=as.numeric(factor(year_quarter))-6) %>% filter(year_quarter>=1)
# x_train <- x_train %>% left_join(tmp, by="year_quarter")
# x_test <- x_test %>% left_join(tmp, by="year_quarter")
# remove direct time info
x_train <- x_train %>% select(-year_month)
dtrain = xgb.DMatrix(as.matrix(x_train), label=y_train)
dtest = xgb.DMatrix(as.matrix(x_test))
xgb_params = list(
seed = 0,
colsample_bytree = 0.7,
subsample = 1,
eta = 0.1,
objective = 'reg:linear',
max_depth = 5,
num_parallel_tree = 1,
min_child_weight = 1,
base_score = 15.8123
)
res = xgb.cv(xgb_params,
dtrain,
nrounds=2000,
nfold=5,
early_stopping_rounds=50,
print_every_n = 10,
verbose= 1,
maximize=F,
prediction=TRUE)
xgb_params = list(
seed = 0,
colsample_bytree = 0.7,
subsample = 1,
eta = 0.2,
objective = 'reg:linear',
max_depth = 5,
num_parallel_tree = 1,
min_child_weight = 1,
base_score = 15.8123
)
res = xgb.cv(xgb_params,
dtrain,
nrounds=2000,
nfold=5,
early_stopping_rounds=50,
print_every_n = 10,
verbose= 1,
maximize=F,
prediction=TRUE)
best_nrounds = res$best_iteration
gbdt = xgb.train(xgb_params, dtrain, best_nrounds)
gbdt = xgb.train(xgb_params, dtrain, best_nrounds)
prediction <- predict(gbdt,dtest)
cat(mean(prediction))
ggplot(data.frame(p=prediction), aes(x=p)) + geom_density()+geom_density(data=train, aes(x=price_doc_norm), color="red")
ggplot(data.frame(p=prediction), aes(x=p)) + geom_density()+geom_density(data=train, aes(x=price_doc_norm), color="red")
imp_matrix_all <- xgb.importance(colnames(dtrain),gbdt)
ggplot(head(imp_matrix_all,50),aes(x=reorder(Feature,Gain),y=Gain))+geom_bar(stat="identity")+coord_flip(ylim=c(0,0.4))+theme_bw()+labs(x="")
ggplot(head(imp_matrix_all,50),aes(x=reorder(Feature,Gain),y=Gain))+geom_bar(stat="identity")+coord_flip(ylim=c(0,0.4))+theme_bw()+labs(x="")
colnames(dtrain)
train2 <- train %>% bind_cols(data.frame(pred=res$pred)) %>% mutate(set="train")
train2 %>% ggplot(aes(x=price_doc_norm,y=pred))+geom_point()+geom_abline(slope=1,intercept=0, color="darkred")+facet_grid(product_type~year)
train2 %>% ggplot(aes(x=pred))+stat_density(geom="line", color="darkgreen")+facet_grid(product_type~year)+stat_density(aes(x=price_doc_norm),geom="line", color="darkred")
train2 %>% group_by(product_type, year_month) %>% summarize(mean(price_doc_norm),mean(pred))
train2 %>% ggplot(aes(x=(year_month), y=pred, color=product_type))+geom_line(stat="summary", size=1.5)+theme(axis.text.x = element_text(angle=-45))+geom_line(data=train, aes(x=year_month, y=price_doc_norm, group=product_type), stat="summary", alpha=0.2, size=1)+theme_bw()
train2 %>% ggplot(aes(x=(year), y=pred, color=product_type))+geom_line(stat="summary", size=1.5)+theme(axis.text.x = element_text(angle=-45))+geom_line(data=train, aes(x=year, y=price_doc_norm, group=product_type), stat="summary", alpha=0.2, size=1)+theme_bw()
train <- train %>% filter(year>2012) %>% group_by(product_type, year_month) %>% mutate(price_doc_norm = (price_doc-mean(price_doc,na.rm=T))/sd(price_doc,na.rm=T)) %>% ungroup()
y_train <- train$price_doc_norm
train$product_type <- as.factor(train$product_type)
x_train <- select(train, -c(id, timestamp, price_doc, price_doc_norm, price_persqm, mean_price_raion, mean_price_persqm_raion, price_doc2, full_sq2, appartment_price, appartment_name, strange_build_year, n, year, year_quarter, build_year, year_month))
x_test <- subset(test, select = -c(id, timestamp, price_doc, appartment_name, strange_build_year, n, year, year_quarter, build_year, year_month))
len_train <- nrow(x_train)
len_test <- nrow(x_test)
train_test <- bind_rows(x_train, x_test)
features <- colnames(train_test)
for (f in features) {
if ((class(train_test[[f]])=="factor") || (class(train_test[[f]])=="character")) {
#cat("VARIABLE : ",f,"\n")
levels <- unique(train_test[[f]])
train_test[[f]] <- as.numeric(factor(train_test[[f]], levels=levels))
}
if (class(train_test[[f]])=="Date"){
train_test[[f]]<-as.numeric(train_test[[f]])
}
}
x_train = train_test[1:len_train,]
x_test = train_test[(len_train+1):(len_train+len_test),]
# #add time-based features
#
# tmp <- macro %>% group_by(year_quarter) %>% summarize(m_rent_price1=mean(rent_price_1room_eco),m_rent_price2=mean(rent_price_2room_eco),m_rent_price3=mean(rent_price_3room_eco)) %>% mutate(year_quarter=as.numeric(factor(year_quarter))-6) %>% filter(year_quarter>=1)
# x_train <- x_train %>% left_join(tmp, by="year_quarter")
# x_test <- x_test %>% left_join(tmp, by="year_quarter")
dtrain = xgb.DMatrix(as.matrix(x_train), label=y_train)
dtest = xgb.DMatrix(as.matrix(x_test))
xgb_params = list(
seed = 0,
colsample_bytree = 0.7,
subsample = 1,
eta = 0.2,
objective = 'reg:linear',
max_depth = 5,
num_parallel_tree = 1,
min_child_weight = 1,
base_score = 15.8123
)
res = xgb.cv(xgb_params,
dtrain,
nrounds=2000,
nfold=5,
early_stopping_rounds=50,
print_every_n = 10,
verbose= 1,
maximize=F,
prediction=TRUE)
best_nrounds = res$best_iteration
#best_nrounds = 145
gbdt = xgb.train(xgb_params, dtrain, best_nrounds)
prediction <- predict(gbdt,dtest)
cat(mean(prediction))
ggplot(data.frame(p=prediction), aes(x=p)) + geom_density()+geom_density(data=train, aes(x=price_doc_norm), color="red")
imp_matrix_all <- xgb.importance(colnames(dtrain),gbdt)
ggplot(head(imp_matrix_all,50),aes(x=reorder(Feature,Gain),y=Gain))+geom_bar(stat="identity")+coord_flip(ylim=c(0,0.4))+theme_bw()+labs(x="")
train2 <- train %>% bind_cols(data.frame(pred=res$pred)) %>% mutate(set="train")
train2 %>% ggplot(aes(x=price_doc_norm,y=pred))+geom_point()+geom_abline(slope=1,intercept=0, color="darkred")+facet_grid(product_type~year)
train2 %>% ggplot(aes(x=pred))+stat_density(geom="line", color="darkgreen")+facet_grid(product_type~year)+stat_density(aes(x=price_doc_norm),geom="line", color="darkred")
train2 %>% group_by(product_type, year_month) %>% summarize(mean(price_doc_norm),mean(pred))
train2 %>% ggplot(aes(x=(year_month), y=pred, color=product_type))+geom_line(stat="summary", size=1.5)+theme(axis.text.x = element_text(angle=-45))+geom_line(data=train, aes(x=year_month, y=price_doc_norm, group=product_type), stat="summary", alpha=0.2, size=1)+theme_bw()
train2 %>% ggplot(aes(x=(year), y=pred, color=product_type))+geom_line(stat="summary", size=1.5)+theme(axis.text.x = element_text(angle=-45))+geom_line(data=train, aes(x=year, y=price_doc_norm, group=product_type), stat="summary", alpha=0.2, size=1)+theme_bw()
test2 <- test %>% bind_cols(data.frame(pred=prediction)) %>% mutate(set="test")
full2 <- bind_rows(train2, test2)
ggplot(full2,aes(x=full_sq,y=pred, color=set))+geom_point(stat="summary")+facet_grid(product_type~.)
ggplot(full2,aes(x=year_month,y=pred, color=set))+geom_point(stat="summary")+facet_grid(product_type~.)
ggplot(full2, aes(x=pred))+geom_density()+facet_grid(product_type~.)
tmp<-train %>% filter(year==2013) %>% group_by(product_type) %>% summarize(m=mean(price_doc),sd=sd(price_doc))
tmp
mean(tmp$m)
test2 <- test2 %>% left_join(tmp, by="product_type")
test2 <- test2 %>% mutate(pred2 = pred*sd+m)
sample_submission$price_doc <- test2$pred2
mean(sample_submission$price_doc)
mean(test2$pred)
mean(test2$pred2)
mean(test2$pred)
tmp
write.csv(sample_submission, "XGB_R_output2.csv", row.names = F)
library(data.table)
library(dplyr)
library(ggplot2)
library(knitr)
library(stringr)
library(DT)
orders <- fread('../input/orders.csv')
products <- fread('../input/products.csv')
order_products <- fread('../input/order_products__train.csv')
order_products_prior <- fread('../input/order_products__prior.csv')
aisles <- fread('../input/aisles.csv')
departments <- fread('../input/departments.csv')
options(tibble.width = Inf)
kable(head(orders,12))
glimpse(orders)
kable(head(order_products,10))
glimpse(order_products)
kable(head(products,10))
glimpse(products)
kable(head(order_products_prior,10))
glimpse(order_products_prior)
kable(head(aisles,10))
glimpse(aisles)
kable(head(departments,10))
glimpse(departments)
orders <- orders %>% mutate(order_hour_of_day = as.numeric(order_hour_of_day), eval_set = as.factor(eval_set))
products <- products %>% mutate(product_name = as.factor(product_name))
aisles <- aisles %>% mutate(aisle = as.factor(aisle))
departments <- departments %>% mutate(department = as.factor(department))
orders %>%
ggplot(aes(x=order_hour_of_day)) +
geom_histogram(stat="count",fill="red")
orders %>%
ggplot(aes(x=order_dow)) +
geom_histogram(stat="count",fill="red")
orders %>%
ggplot(aes(x=days_since_prior_order)) +
geom_histogram(stat="count",fill="red")
orders %>% filter(eval_set=="prior") %>% count(order_number) %>% ggplot(aes(order_number,n)) + geom_line(color="red", size=1)+geom_point(size=2, color="red")
order_products %>%
group_by(order_id) %>%
summarize(n_items = last(add_to_cart_order)) %>%
ggplot(aes(x=n_items))+
geom_histogram(stat="count",fill="red") +
geom_rug()+
coord_cartesian(xlim=c(0,80))
order_products_prior %>%
group_by(order_id) %>%
summarize(n_items = last(add_to_cart_order)) %>%
ggplot(aes(x=n_items))+
geom_histogram(stat="count",fill="red") +
geom_rug() +
coord_cartesian(xlim=c(0,80))
tmp <- order_products %>%
group_by(product_id) %>%
summarize(count = n()) %>%
top_n(10, wt = count) %>%
left_join(select(products,product_id,product_name),by="product_id") %>%
arrange(desc(count))
kable(tmp)
tmp %>%
ggplot(aes(x=reorder(product_name,-count), y=count))+
geom_bar(stat="identity",fill="red")+
theme(axis.text.x=element_text(angle=90, hjust=1),axis.title.x = element_blank())
tmp <- order_products %>%
group_by(reordered) %>%
summarize(count = n()) %>%
mutate(reordered = as.factor(reordered)) %>%
mutate(proportion = count/sum(count))
kable(tmp)
tmp %>%
ggplot(aes(x=reordered,y=count,fill=reordered))+
geom_bar(stat="identity")
tmp <-order_products %>%
group_by(product_id) %>%
summarize(proportion_reordered = mean(reordered), n=n()) %>%
filter(n>40) %>%
top_n(10,wt=proportion_reordered) %>%
arrange(desc(proportion_reordered)) %>%
left_join(products,by="product_id")
kable(tmp)
tmp %>%
ggplot(aes(x=reorder(product_name,-proportion_reordered), y=proportion_reordered))+
geom_bar(stat="identity",fill="red")+
theme(axis.text.x=element_text(angle=90, hjust=1),axis.title.x = element_blank())+coord_cartesian(ylim=c(0.85,0.95))
tmp <- order_products %>%
group_by(product_id, add_to_cart_order) %>%
summarize(count = n()) %>% mutate(pct=count/sum(count)) %>%
filter(add_to_cart_order == 1, count>10) %>%
arrange(desc(pct)) %>%
left_join(products,by="product_id") %>%
select(product_name, pct, count) %>%
ungroup() %>%
top_n(10, wt=pct)
kable(tmp)
tmp %>%
ggplot(aes(x=reorder(product_name,-pct), y=pct))+
geom_bar(stat="identity",fill="red")+
theme(axis.text.x=element_text(angle=90, hjust=1),axis.title.x = element_blank())+coord_cartesian(ylim=c(0.4,0.7))
order_products %>%
left_join(orders,by="order_id") %>%
group_by(days_since_prior_order) %>%
summarize(mean_reorder = mean(reordered)) %>%
ggplot(aes(x=days_since_prior_order,y=mean_reorder))+
geom_bar(stat="identity",fill="red")
order_products %>%
group_by(product_id) %>%
summarize(proportion_reordered = mean(reordered), n=n()) %>%
ggplot(aes(x=n,y=proportion_reordered))+
geom_point()+
geom_smooth(color="red")+
coord_cartesian(xlim=c(0,2000))
products
head(products)
str_detect(str_to_lower(products$product_name),'organic')
sum(str_detect(str_to_lower(products$product_name),'organic'))
sum(str_detect(products$product_name,'organic'))
sum(str_detect(products$product_name,'Organic'))
install.packages(c("curl", "DBI", "dplyr", "evaluate", "ggExtra", "quantmod", "R6", "rgdal", "rmarkdown", "shinyjs", "sp", "visNetwork", "XML"))
devtools::install_github("Microsoft/LightGBM", subdir = "R-package")
install.packages("devtools")
devtools::install_github("Microsoft/LightGBM", subdir = "R-package")
devtools::install_github("Microsoft/LightGBM", subdir = "R-package")
devtools::install_github("Microsoft/LightGBM", subdir = "R-package")
devtools::install_github("Microsoft/LightGBM@v1", subdir = "R-package")
devtools::install_github("Microsoft/LightGBM", subdir = "R-package")
devtools::install_github("Laurae2/lgbdl")
lgb.dl(commit = "master",
compiler = "gcc",
repo = "https://github.com/Microsoft/LightGBM",
cores = 4)
library(lgbdl)
lgb.dl(commit = "master",
compiler = "gcc",
repo = "https://github.com/Microsoft/LightGBM",
cores = 4)
lgb.dl(commit = "master",
compiler = "gcc",
repo = "https://github.com/Microsoft/LightGBM",
cores = 4)
lgb.dl(commit = "master",
repo = "https://github.com/Microsoft/LightGBM",
cores = 4)
lgb.dl(commit = "master",
repo = "https://github.com/Microsoft/LightGBM",
cores = 4)
lgb.dl(commit = "master",
repo = "https://github.com/Microsoft/LightGBM",
cores = 4)
lgb.dl(commit = "master",
repo = "https://github.com/Microsoft/LightGBM",
cores = 4)
lgb.dl(commit = "master",
repo = "https://github.com/Microsoft/LightGBM",
cores = 4)
lgb.dl(commit = "master",
repo = "https://github.com/Microsoft/LightGBM",
cores = 4, compiler="gcc")
lgb.dl(commit = "master",
repo = "https://github.com/Microsoft/LightGBM",
cores = 4, compiler="gcc")
rm(list=ls())
gc()
library(data.table)
library(dplyr)
library(tidyr)
library(lightgbm)
library(stringr)
library(ModelMetrics)
setwd("D:/Eigene Dateien/sonstiges/Kaggle/instacart/scripts")
f1 <- function (y, pred)
{
tp <- sum(pred==1 & y == 1)
fp <- sum(pred==1 & y == 0)
fn <- sum(pred==0 & y == 1)
precision <- ifelse ((tp==0 & fp==0), 0, tp/(tp+fp))
recall <- ifelse ((tp==0 & fn==0), 0, tp/(tp+fn))
score <- ifelse ((precision==0 & recall==0), 0, 2*precision*recall/(precision+recall))
score
}
# Load Data ---------------------------------------------------------------
path <- "../input"
aisles <- fread(file.path(path, "aisles.csv"))
departments <- fread(file.path(path, "departments.csv"))
opp <- fread(file.path(path, "order_products__prior.csv"))
opt <- fread(file.path(path, "order_products__train.csv"))
ord <- fread(file.path(path, "orders.csv"))
products <- fread(file.path(path, "products.csv"))
# Reshape data ------------------------------------------------------------
aisles$aisle <- as.factor(aisles$aisle)
departments$department <- as.factor(departments$department)
ord$eval_set <- as.factor(ord$eval_set)
products$product_name <- as.factor(products$product_name)
products <- products %>%
inner_join(aisles) %>% inner_join(departments) %>%
select(-aisle_id, -department_id)
rm(aisles, departments)
# add user_id to train orders
opt$user_id <- ord$user_id[match(opt$order_id, ord$order_id)]
# join products with order info for all prior orders
op <- ord %>% inner_join(opp, by = "order_id")
op <- op %>% group_by(user_id) %>% mutate(num_orders = max(order_number)) %>% ungroup()
op <- op %>% arrange(user_id, order_number, product_id) %>%
group_by(user_id, product_id) %>%
mutate(product_time = row_number()) %>% ungroup()
op <- as.data.table(op)
setkeyv(op,c("user_id","product_id"))
op[,c("product_time2","first_order","last_order", "sum_order") := .(.I,order_number[1],order_number[.N],.N),.(user_id,product_id)]
head(op,50)
View(head(op,30))
op[,c("product_time2","first_order","last_order", "sum_order") := .(.I[.N],order_number[1],order_number[.N],.N),.(user_id,product_id)]
View(head(op,30))
op[,c("product_time2","first_order","last_order", "sum_order") := .(1:.N,order_number[1],order_number[.N],.N),.(user_id,product_id)]
View(head(op,30))
op[,.(num_order = .N),.(user_id)]
op[,.(num_order = .N),.(user_id, order_id)]
op[,num_order = length(unique(order_id)),.(user_id)]
op[,num_order := length(unique(order_id)),.(user_id)]
View(head(op,30))
View(head(op,200))
rm(list=ls())
gc()
library(data.table)
library(dplyr)
library(tidyr)
library(lightgbm)
library(stringr)
library(ModelMetrics)
setwd("D:/Eigene Dateien/sonstiges/Kaggle/instacart/scripts")
f1 <- function (y, pred)
{
tp <- sum(pred==1 & y == 1)
fp <- sum(pred==1 & y == 0)
fn <- sum(pred==0 & y == 1)
precision <- ifelse ((tp==0 & fp==0), 0, tp/(tp+fp))
recall <- ifelse ((tp==0 & fn==0), 0, tp/(tp+fn))
score <- ifelse ((precision==0 & recall==0), 0, 2*precision*recall/(precision+recall))
score
}
# Load Data ---------------------------------------------------------------
path <- "../input"
aisles <- fread(file.path(path, "aisles.csv"))
departments <- fread(file.path(path, "departments.csv"))
opp <- fread(file.path(path, "order_products__prior.csv"))
opt <- fread(file.path(path, "order_products__train.csv"))
ord <- fread(file.path(path, "orders.csv"))
products <- fread(file.path(path, "products.csv"))
# Reshape data ------------------------------------------------------------
aisles$aisle <- as.factor(aisles$aisle)
departments$department <- as.factor(departments$department)
ord$eval_set <- as.factor(ord$eval_set)
products$product_name <- as.factor(products$product_name)
products <- products %>%
inner_join(aisles) %>% inner_join(departments) %>%
select(-aisle_id, -department_id)
rm(aisles, departments)
# add user_id to train orders
opt$user_id <- ord$user_id[match(opt$order_id, ord$order_id)]
# join products with order info for all prior orders
op <- ord %>% inner_join(opp, by = "order_id")
# data.table is way faster
op <- as.data.table(op)
setkeyv(op,c("user_id","product_id"))
op[,num_order := length(unique(order_id)),.(user_id)]
op[,c("product_time2","first_order","last_order","sum_order") := .(1:.N,order_number[1],order_number[.N],.N),.(user_id,product_id)]
head(op)
