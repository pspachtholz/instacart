setinfo(dtrain, "init_score", ptrain)
setinfo(dtest, "init_score", ptest)
print("This is result of boost from initial prediction")
bst <- lgb.train(params = param,
data = dtrain,
nrounds = 5,
valids = valids)
# Note: we need the margin value instead of transformed prediction in set_init_score
ptrain <- predict(bst, agaricus.train$data, rawscore = TRUE)
ptest  <- predict(bst, agaricus.test$data, rawscore = TRUE)
# set the init_score property of dtrain and dtest
# base margin is the base prediction we will boost from
setinfo(dtrain, "init_score", ptrain)
setinfo(dtest, "init_score", ptest)
print("This is result of boost from initial prediction")
bst <- lgb.train(params = param,
data = dtrain,
nrounds = 5,
valids = valids)
# Note: we need the margin value instead of transformed prediction in set_init_score
ptrain <- predict(bst, agaricus.train$data, rawscore = TRUE)
ptest  <- predict(bst, agaricus.test$data, rawscore = TRUE)
# set the init_score property of dtrain and dtest
# base margin is the base prediction we will boost from
setinfo(dtrain, "init_score", ptrain)
setinfo(dtest, "init_score", ptest)
print("This is result of boost from initial prediction")
bst <- lgb.train(params = param,
data = dtrain,
nrounds = 5,
valids = valids)
# Note: we need the margin value instead of transformed prediction in set_init_score
ptrain <- predict(bst, agaricus.train$data, rawscore = TRUE)
ptest  <- predict(bst, agaricus.test$data, rawscore = TRUE)
# set the init_score property of dtrain and dtest
# base margin is the base prediction we will boost from
setinfo(dtrain, "init_score", ptrain)
setinfo(dtest, "init_score", ptest)
print("This is result of boost from initial prediction")
bst <- lgb.train(params = param,
data = dtrain,
nrounds = 5,
valids = valids)
# Note: we need the margin value instead of transformed prediction in set_init_score
ptrain <- predict(bst, agaricus.train$data, rawscore = TRUE)
ptest  <- predict(bst, agaricus.test$data, rawscore = TRUE)
# set the init_score property of dtrain and dtest
# base margin is the base prediction we will boost from
setinfo(dtrain, "init_score", ptrain)
setinfo(dtest, "init_score", ptest)
print("This is result of boost from initial prediction")
bst <- lgb.train(params = param,
data = dtrain,
nrounds = 5,
valids = valids)
# Note: we need the margin value instead of transformed prediction in set_init_score
ptrain <- predict(bst, agaricus.train$data, rawscore = TRUE)
ptest  <- predict(bst, agaricus.test$data, rawscore = TRUE)
# set the init_score property of dtrain and dtest
# base margin is the base prediction we will boost from
setinfo(dtrain, "init_score", ptrain)
setinfo(dtest, "init_score", ptest)
print("This is result of boost from initial prediction")
bst <- lgb.train(params = param,
data = dtrain,
nrounds = 5,
valids = valids)
# Note: we need the margin value instead of transformed prediction in set_init_score
ptrain <- predict(bst, agaricus.train$data, rawscore = TRUE)
ptest  <- predict(bst, agaricus.test$data, rawscore = TRUE)
# set the init_score property of dtrain and dtest
# base margin is the base prediction we will boost from
setinfo(dtrain, "init_score", ptrain)
setinfo(dtest, "init_score", ptest)
print("This is result of boost from initial prediction")
bst <- lgb.train(params = param,
data = dtrain,
nrounds = 5,
valids = valids)
?setinfo
install.packages("dplyr")
install.packages("dplyr")
install.packages("data.table")
setwd("D:/Eigene Dateien/sonstiges/Kaggle/instacart/scripts")
rm(list=ls())
gc()
library(data.table)
library(dplyr)
library(tidyr)
library(xgboost)
library(stringr)
library(ModelMetrics)
library(ggplot2)
#setwd("D:/Eigene Dateien/sonstiges/Kaggle/instacart/scripts")
f1 <- function (y, pred)
{
tp <- sum(pred==1 & y == 1)
fp <- sum(pred==1 & y == 0)
fn <- sum(pred==0 & y == 1)
precision <- ifelse ((tp==0 & fp==0), 0, tp/(tp+fp)) # no reorders predicted
recall <- ifelse ((tp==0 & fn==0), 0, tp/(tp+fn)) # no products reordered
score <- ifelse((all(pred==0) & all(y==0)),1,ifelse((precision==0 & recall==0),0,2*precision*recall/(precision+recall)))
score
}
# Load Data ---------------------------------------------------------------
path <- "../input"
aisles <- fread(file.path(path, "aisles.csv"))
departments <- fread(file.path(path, "departments.csv"))
opp <- fread(file.path(path, "order_products__prior.csv"))
opt <- fread(file.path(path, "order_products__train.csv"))
ord <- fread(file.path(path, "orders.csv"))
products <- fread(file.path(path, "products.csv"))
# add user_id to train orders
opt$user_id <- ord$user_id[match(opt$order_id, ord$order_id)]
train_info <- opt[,.(sum_products = .N, sum_reordered=sum(reordered)),user_id]
# join products with order info for all prior orders
setkey(opp,order_id)
setkey(ord,order_id)
op <- merge(ord,opp,all=FALSE) # inner join filter
rm(opp)
gc()
# Get the only reorderes ------------------------------
reorder_users <- op[order_number>1 & .N>2,.(mean_reordered = mean(reordered), n=.N), user_id][mean_reordered==1,user_id]
gc()
# Take subset of Data ----------------------------------------------------
test_users <- unique(ord[eval_set=="test", user_id])
train_users <- unique(ord[eval_set=="train", user_id]) #& !user_id %in% reorder_users
n_users <- 15000
all_train_users <- train_users[1:n_users]
all_users <- c(all_train_users, test_users)
setkeyv(op,c("user_id","product_id", "order_number"))
op[,last_prior_order := max(order_number),.(user_id)]
ord[,last_order := max(order_number),.(user_id)] # auch train/test orders mit drin
#op<-op[last_prior_order-order_number <= 2] #last order = last prior order
#ord<-ord[last_order-order_number <= 3]
setkey(ord, user_id, order_number)
ord[order(order_number), ':=' (order_days_sum = cumsum(ifelse(is.na(days_since_prior_order),0,days_since_prior_order))),user_id][,':=' (order_days_max=max(order_days_sum)),user_id][, ':=' (order_day_year = 365-(order_days_max-order_days_sum)),user_id]
op <- merge(op, ord[,.(user_id, order_number, order_days_sum, order_days_max, order_day_year)], all.x=T)
op[order(user_id, product_id, order_number), ':=' (
product_time = 1:.N,
first_order = min(order_number),
second_order = order_number[2],
third_order = order_number[3],
up_sum_order = .N), .(user_id,product_id)]
op[(reordered==1 | product_time==1),':=' (order_days_lag=c(NA,order_days_sum[-.N])), .(user_id, product_id)]
# Products ----------------------------------------------------------------
prd <- op[, .(
prod_orders = .N,
prod_maxorders = max(product_time),
prod_reorders = sum(reordered),
prod_first_orders = sum(product_time==1),
prod_second_orders = sum(product_time==2),
prod_add_to_cart = mean(add_to_cart_order),
prod_inpercent_orders=mean(up_sum_order/last_prior_order),
prod_inpercent_afterfirst = mean(up_sum_order/(last_prior_order-first_order+1)),
prod_popularity = mean(uniqueN(user_id)),
prod_season = mean(order_day_year),
prod_orders_till_first_reorder = mean(second_order-first_order,na.rm=T)
), product_id][,':=' (
prod_reorder_probability = prod_second_orders / prod_first_orders,
prod_reorder_times = 1 + prod_reorders / prod_first_orders,
prod_reorder_ratio = prod_reorders / prod_orders,
prod_reorders = NULL,
prod_first_orders = NULL,
prod_second_orders = NULL
)]
# do the subsetting after product features were created
op<-op[user_id %in% all_users]
opt<-opt[user_id %in% all_users]
ord<-ord[user_id %in% all_users]
#products[, ':=' (prod_organic = ifelse(str_detect(str_to_lower(product_name),'organic'),1,0))]
#products[, ':=' (product_name = NULL)]
setkey(products,product_id)
setkey(prd, product_id)
setkey(op, product_id)
#prd <- merge(prd, products[,.(product_id, aisle_id, department_id)], all.x=TRUE)
op <- merge(op, products[,.(product_id, aisle_id, department_id)], all.x=TRUE)
rm(products)
gc()
# Order typicality --------------------------------------------------------
od <- ord[order(user_id, order_number), .(
order_dow_typicality = (sum(order_dow==order_dow[.N])-1)/.N)
, .(user_id)]
od
hist(od$order_dow_typicality)
tmp <- ord[order(user_id,order_number), .(order_number,
order_hod_typicality = order_hour_of_day[1:.N]-order_hour_of_day[.N])
, .(user_id)]
tmp
, .(user_id)][order_hod_typicality = ifelse(order_hod_typicality<-12,order_hod_typicality+24,ifelse(order_hod_typicality>12, order_hod_typicality-24,order_hod_typicality))]
, .(user_id)][,.(order_hod_typicality = ifelse(order_hod_typicality<-12,order_hod_typicality+24,ifelse(order_hod_typicality>12, order_hod_typicality-24,order_hod_typicality)))]
tmp <- ord[order(user_id,order_number), .(order_number,
order_hod_typicality = order_hour_of_day[1:.N]-order_hour_of_day[.N])
, .(user_id)][,.(order_hod_typicality = ifelse(order_hod_typicality<-12,order_hod_typicality+24,ifelse(order_hod_typicality>12, order_hod_typicality-24,order_hod_typicality)))]
tmp
, .(user_id)][,.(order_hod_typicality = ifelse(order_hod_typicality<-12,order_hod_typicality+24,ifelse(order_hod_typicality>12, order_hod_typicality-24,order_hod_typicality))), .(user_id, order_id)]
tmp <- ord[order(user_id,order_number), .(order_number,
order_hod_typicality = order_hour_of_day[1:.N]-order_hour_of_day[.N])
, .(user_id)][,.(order_hod_typicality = ifelse(order_hod_typicality<-12,order_hod_typicality+24,ifelse(order_hod_typicality>12, order_hod_typicality-24,order_hod_typicality))), .(user_id, order_id)]
tmp <- ord[order(user_id,order_number), .(order_number,
order_hod_typicality = order_hour_of_day[1:.N]-order_hour_of_day[.N])
, .(user_id)][,.(order_hod_typicality = ifelse(order_hod_typicality<-12,order_hod_typicality+24,ifelse(order_hod_typicality>12, order_hod_typicality-24,order_hod_typicality))), .(user_id, order_number)]
tmp
tmp <- ord[order(user_id,order_number), .(order_number,
order_hod_typicality = order_hour_of_day[1:.N]-order_hour_of_day[.N])
, .(user_id)][,.(order_hod_typicality = ifelse(order_hod_typicality< -12,order_hod_typicality+24,ifelse(order_hod_typicality>12, order_hod_typicality-24,order_hod_typicality))), .(user_id, order_number)]
tmp <- ord[order(user_id,order_number), .(order_number,
order_hod_typicality = order_hour_of_day[1:.N]-order_hour_of_day[.N])
, .(user_id)]
tmp[,.(order_hod_typicality = ifelse((order_hod_typicality< -12),order_hod_typicality+24,order_hod_typicality))), .(user_id, order_number)]
tmp[,.(order_hod_typicality = ifelse((order_hod_typicality< -12),order_hod_typicality+24,order_hod_typicality)), .(user_id, order_number)]
tmp
tmp[,.(order_hod_typicality2 = ifelse((order_hod_typicality< -12),order_hod_typicality+24,order_hod_typicality)), .(user_id, order_number)]
tmp[,.(order_hod_typicality2 = ifelse((order_hod_typicality < -12),order_hod_typicality+24,order_hod_typicality)), .(user_id, order_number)]
tmp[,.(order_hod_typicality2 = ifelse((order_hod_typicality < -12),1,0)), .(user_id, order_number)]
tmp2<-tmp[,.(order_hod_typicality2 = ifelse((order_hod_typicality < -12),1,0)), .(user_id, order_number)]
hist(tmp2$order_hod_typicality2)
tmp2<-tmp[,.(order_hod_typicality2 = ifelse((order_hod_typicality < -12),order_hod_typicality+24,0)), .(user_id, order_number)]
tmp2
tmp2<-tmp[,.(order_hod_typicality2 = ifelse((order_hod_typicality < -12),order_hod_typicality+24,order_hod_typicality)), .(user_id, order_number)]
tmp[order_hod_typicality < -12,':=' (order_hod_typicality=order_hod_typicality+24)]
tmp
tmp[order_hod_typicality < -12,':=' (order_hod_typicality2=order_hod_typicality+24)]
tmp
tmp[order_hod_typicality > 12,':=' (order_hod_typicality2=order_hod_typicality-24)]
tmp
tmp[between(order_hod_typicality,-12,12),':=' (order_hod_typicality2=order_hod_typicality)]
tmp[between(order_hod_typicality,-12,12),':=' (order_hod_typicality2=order_hod_typicality*1)]
tmp
tmp[,':=' (order_hod_typicality = order_hod_typicality2)]
tmp[,':=' (order_hod_typicality2 = NULL)]
tmp
tmp[,':=' (order_hod_typicality = mean(order_hod_typicality)), user_id]
tmp
tmp[, .(order_hod_typicality = mean(order_hod_typicality)), user_id]
od
od <- merge(od, tmp, by="user_id")
od
tmp
tmp <- tmp[, .(order_hod_typicality = mean(order_hod_typicality)), user_id]
od <- merge(od, tmp, by="user_id")
od
od <- ord[order(user_id, order_number), .(
order_dow_typicality = (sum(order_dow==order_dow[.N])-1)/.N)
, .(user_id)]
od <- merge(od, tmp, by="user_id")
od
users <- ord[eval_set=="prior", .(user_orders=.N,
user_period=sum(days_since_prior_order, na.rm = T),
user_mean_days_since_prior = mean(days_since_prior_order, na.rm = T),
user_std_days_since_prior_order = sd(days_since_prior_order, na.rm=T)
), user_id]
tmp <- op[,.(order_sum_products = .N, order_number),.(user_id, order_id)]
tmp[, ':=' (user_mean_basket = mean(order_sum_products), user_mean_order_number = mean(order_number)), user_id]
tmpp <- tmp[, .(order_sum_products = mean(order_sum_products), user_mean_basket = mean(user_mean_basket), user_mean_order_number = mean(user_mean_order_number)), .(user_id, order_number)]
us <- tmpp[, .(user_slope_basket = sum((order_sum_products-user_mean_basket)*(order_number-user_mean_order_number)) / sum((order_number-user_mean_order_number)^2)), user_id]
users <- merge(users,us)
rm(tmp, tmpp)
gc()
us <- op[,.(
user_total_products = .N,
user_reorder_ratio = sum(reordered == 1) / sum(order_number > 1),
user_distinct_products = uniqueN(product_id),
user_distinct_aisles = uniqueN(aisle_id),
user_distinct_depts = uniqueN(department_id)
), user_id][,':=' (user_pct_distinct_products = user_distinct_products / user_total_products,
user_pct_distinct_aisles = user_distinct_aisles / user_total_products,
user_pct_distinct_depts = user_distinct_depts / user_total_products,
user_distinct_products = NULL,
user_distinct_aisles = NULL,
user_distinct_depts = NULL)]
users <- merge(users, us, all=FALSE)
us <- op[,.(user_order_products = .N),.(user_id,order_id)][,.(
user_order_products_mean=mean(user_order_products),
user_order_products_sd=sd(user_order_products)
), user_id]
users <- merge(users, us, all=FALSE)
us <- op[(last_prior_order-order_number)<=2, .(
user_order_products_3 = .N,
user_reorder_ratio_3=mean(reordered)
), .(user_id)][,.(
user_order_products_mean_last3 = mean(user_order_products_3),
user_reorder_ratio_last3=mean(user_reorder_ratio_3)
), user_id]
users <- merge(users, us, all=FALSE)
users[, ':=' (
user_recent_orders_factor = user_order_products_mean_last3/user_order_products_mean,
user_recent_reorder_factor = user_reorder_ratio_last3 / user_reorder_ratio,
user_activity_products = ifelse(user_period==0,0,user_total_products/user_period),
user_activity_orders = ifelse(user_period==0,0,user_orders/user_period),
user_order_products_mean_last3 = NULL,
user_reorder_ratio_last3 = NULL
)]
us <- ord[eval_set != "prior", .(
user_id,
order_id,
eval_set,
train_time_since_last_order = days_since_prior_order,
train_dow = order_dow,
train_hod= order_hour_of_day,
train_season = order_day_year)]
setkey(users, user_id)
setkey(us, user_id)
users <- merge(users, us, all=FALSE)
users <- merge(users, od, all=FALSE)
rm(us)
gc()
# Departments -------------------------------------------------------------
dep <- op[,.(dept_total_products = .N,
dept_total_orders = uniqueN(order_id),
dept_total_users = uniqueN(user_id),
dept_reorder_times = sum(reordered),
dept_reorder_ratio = mean(reordered)), department_id][,':='
(dept_products_per_order = dept_total_products / dept_total_orders)]
# Database ----------------------------------------------------------------
# to do days until the product is first reordered
data <- op[, .(
up_orders = .N,
up_first_order = min(order_number),
up_last_order = max(order_number),
up_last_order_dow = order_dow[order_number==max(order_number)],
up_last_order_hod = order_hour_of_day[order_number==max(order_number)],
up_avg_cart_position = mean(add_to_cart_order),
up_avg_days_since_reorder = mean(order_days_sum-order_days_lag,na.rm=T)),
.(user_id, product_id)]
tmp <- op[, .(up_days_till_first_reorder=ifelse(is.null(order_days_sum[product_time==2]),NA,order_days_sum[product_time==2]-order_days_sum[product_time==1])), .(user_id, product_id)]
data <- merge(data,tmp, all.x=TRUE)
rm(tmp)
gc()
setkey(users,user_id)
setkey(data,user_id)
data <- merge(data,users,all=FALSE)
data<-merge(data, ord[,.(user_id, order_number, order_days_sum)], all.x=TRUE, by.x=c("user_id", "up_last_order"), by.y=c("user_id", "order_number"))
data[,':=' (
up_days_since_last_reorder = user_period-order_days_sum+train_time_since_last_order,
order_days_sum=NULL
)]
setkey(prd,product_id)
setkey(data,product_id)
data <- merge(data,prd,all=FALSE)
rm(op, ord)
data[,':=' (
up_diff_train_typical = abs(train_time_since_last_order-up_avg_days_since_reorder),
up_perc_diff_train_typical = train_time_since_last_order/up_avg_days_since_reorder
)]
#setkey(dep,department_id)
#setkey(data,department_id)
#data <- merge(data,dep,all=FALSE)
rm(prd, users, dep)
gc()
data[,':=' (up_order_rate = up_orders / user_orders,
up_orders_since_last_order = user_orders - up_last_order,
up_inpercent_afterfirst = up_orders / (user_orders - up_first_order + 1)
)]
# merge in train order
setkey(opt, user_id, product_id)
setkey(data, user_id, product_id)
data <- merge(data, opt[,.(user_id, product_id, reordered)], all.x=TRUE)
rm(opt)
gc()
# do it the data.table way
# Train / Test datasets ---------------------------------------------------
train <- data[eval_set == "train"]
train[,':=' (eval_set=NULL)]
train[is.na(reordered), ':=' (reordered=0)]
test <-data[eval_set == "test"]
test[,':=' (eval_set=NULL, reordered=NULL)]
rm(data)
gc()
# Model fitting ---------------------------------------------------------
names(train)
# Setting params for fitting
params <- list(
"objective"           = "reg:logistic",
"eval_metric"         = "logloss",
"eta"                 = 0.03,
"max_depth"           = 6,
"min_child_weight"    = 10,
"gamma"               = 0.7,
"subsample"           = 0.9,
"colsample_bytree"    = 0.95
)
# Get the folds ---------------------------------
# 131,209 users in total
users_per_fold <- 5000
n_fold <- 3
# create the folds
val_users_random <- sample(unique(train[,user_id]), size = n_fold*users_per_fold, replace = FALSE)
if (n_fold ==1) {
val_user_groups <- 1
} else {
val_user_groups <- cut(1:length(val_users_random),n_fold,labels=FALSE)
}
folds <- list()
for (i in 1:n_fold) {
folds[[i]] <- which(train[,user_id] %in% val_users_random[val_user_groups==i])
}
# Do the CV ------------------------------------
threshold <- 0.20
n_rounds <- 200
calc_f1_every_n <- 10
res<-list()
res$f1 <- matrix(0,n_rounds/calc_f1_every_n,n_fold)
res$mean_reordered <- matrix(0,n_rounds/calc_f1_every_n,n_fold)
for (i in 1:length(folds)) {
cat('Training on fold', i,'...\n')
cv_train <- train[-folds[[i]],]
cv_val <- train[folds[[i]],]
dtrain <- xgb.DMatrix(data.matrix(select(cv_train,-user_id,-product_id,-order_id,-reordered)),label=cv_train$reordered)
dval <- xgb.DMatrix(data.matrix(select(cv_val,-user_id,-product_id,-order_id,-reordered)),label=cv_val$reordered)
watchlist <- list(train=dtrain, val=dval)
train_users <- cv_train$user_id
for (j in 1:(n_rounds/calc_f1_every_n)){
if (j==1){
bst <- xgb.train(params,dtrain,calc_f1_every_n, watchlist=watchlist) # first boosting iteration
} else {
bst <- xgb.train(params,dtrain,calc_f1_every_n, watchlist=watchlist, xgb_model=bst) # incremental boost
}
pred<-predict(bst,dval)
y <- getinfo(dval,'label')
valid_users <- cv_val$user_id
valid_orders <- cv_val$order_id
dt <- data.table(user_id=valid_users, order_id=valid_orders, y=y, pred=pred, ypred=(pred>threshold)*1)
f1_score <- dt[,.(f1score = f1(y,ypred)), user_id][,.(f1_mean=mean(f1score))]
cat('val-f1: ', f1_score$f1_mean, 'mean sum_pred: ',dt[,.(sp = sum(ypred)),user_id][,.(mean_sp = mean(sp))]$mean_sp, '\n')
res$f1[j,i] <- f1_score$f1_mean
res$mean_reordered[j,i] <- mean(cv_val$reordered)
}
}
n_rounds <- 120
calc_f1_every_n <- 10
res<-list()
res$f1 <- matrix(0,n_rounds/calc_f1_every_n,n_fold)
res$mean_reordered <- matrix(0,n_rounds/calc_f1_every_n,n_fold)
for (i in 1:length(folds)) {
cat('Training on fold', i,'...\n')
cv_train <- train[-folds[[i]],]
cv_val <- train[folds[[i]],]
dtrain <- xgb.DMatrix(data.matrix(select(cv_train,-user_id,-product_id,-order_id,-reordered)),label=cv_train$reordered)
dval <- xgb.DMatrix(data.matrix(select(cv_val,-user_id,-product_id,-order_id,-reordered)),label=cv_val$reordered)
watchlist <- list(train=dtrain, val=dval)
train_users <- cv_train$user_id
for (j in 1:(n_rounds/calc_f1_every_n)){
if (j==1){
bst <- xgb.train(params,dtrain,calc_f1_every_n, watchlist=watchlist) # first boosting iteration
} else {
bst <- xgb.train(params,dtrain,calc_f1_every_n, watchlist=watchlist, xgb_model=bst) # incremental boost
}
pred<-predict(bst,dval)
y <- getinfo(dval,'label')
valid_users <- cv_val$user_id
valid_orders <- cv_val$order_id
dt <- data.table(user_id=valid_users, order_id=valid_orders, y=y, pred=pred, ypred=(pred>threshold)*1)
f1_score <- dt[,.(f1score = f1(y,ypred)), user_id][,.(f1_mean=mean(f1score))]
cat('val-f1: ', f1_score$f1_mean, 'mean sum_pred: ',dt[,.(sp = sum(ypred)),user_id][,.(mean_sp = mean(sp))]$mean_sp, '\n')
res$f1[j,i] <- f1_score$f1_mean
res$mean_reordered[j,i] <- mean(cv_val$reordered)
}
}
# Do the CV ------------------------------------
threshold <- 0.20
n_rounds <- 150
calc_f1_every_n <- 10
res<-list()
res$f1 <- matrix(0,n_rounds/calc_f1_every_n,n_fold)
res$mean_reordered <- matrix(0,n_rounds/calc_f1_every_n,n_fold)
for (i in 1:length(folds)) {
cat('Training on fold', i,'...\n')
cv_train <- train[-folds[[i]],]
cv_val <- train[folds[[i]],]
dtrain <- xgb.DMatrix(data.matrix(select(cv_train,-user_id,-product_id,-order_id,-reordered)),label=cv_train$reordered)
dval <- xgb.DMatrix(data.matrix(select(cv_val,-user_id,-product_id,-order_id,-reordered)),label=cv_val$reordered)
watchlist <- list(train=dtrain, val=dval)
train_users <- cv_train$user_id
for (j in 1:(n_rounds/calc_f1_every_n)){
if (j==1){
bst <- xgb.train(params,dtrain,calc_f1_every_n, watchlist=watchlist) # first boosting iteration
} else {
bst <- xgb.train(params,dtrain,calc_f1_every_n, watchlist=watchlist, xgb_model=bst) # incremental boost
}
pred<-predict(bst,dval)
y <- getinfo(dval,'label')
valid_users <- cv_val$user_id
valid_orders <- cv_val$order_id
dt <- data.table(user_id=valid_users, order_id=valid_orders, y=y, pred=pred, ypred=(pred>threshold)*1)
f1_score <- dt[,.(f1score = f1(y,ypred)), user_id][,.(f1_mean=mean(f1score))]
cat('val-f1: ', f1_score$f1_mean, 'mean sum_pred: ',dt[,.(sp = sum(ypred)),user_id][,.(mean_sp = mean(sp))]$mean_sp, '\n')
res$f1[j,i] <- f1_score$f1_mean
res$mean_reordered[j,i] <- mean(cv_val$reordered)
}
}
results <- data.frame(m=rowMeans(res$f1),sd=apply(res$f1,1,sd),res$f1, res$mean_reordered)
results
best_iter <- which.max(results$m)*calc_f1_every_n
n_rounds <- best_iter
n_rounds
dtrain <- xgb.DMatrix(as.matrix(train %>% select(-user_id,-product_id,-order_id,-reordered)), label = train$reordered)
watchlist <- list(train = dtrain)
model <- xgb.train(data = dtrain, params = params, nrounds = n_rounds, watchlist=watchlist)
importance <- xgb.importance(colnames(dtrain), model = model)
ggplot(importance,aes(y=Gain,x=reorder(Feature,Gain)))+geom_bar(stat="identity")+coord_flip()+theme(axis.text.y = element_text(hjust = 0))
ggplot(importance,aes(y=Gain,x=reorder(Feature,Feature)))+geom_bar(stat="identity")+coord_flip()+theme(axis.text.y = element_text(hjust = 0))
dtest <- xgb.DMatrix(as.matrix(test[,-c("user_id","order_id", "product_id"),with=FALSE]))
test$pred <- predict(model, dtest)
test[,reordered:=(pred>0.2)*1]
submission <- test[reordered==1,.(products = paste(product_id, collapse = " ")), order_id]
missing <- data.table(
order_id = unique(test$order_id[!test$order_id %in% submission$order_id]),
products = "None"
)
submission <- rbindlist(list(submission, missing))
fwrite(submission[order(order_id)], file = "submit.csv")
