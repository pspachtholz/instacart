bestellungen am selben tag sind ganz anders:
sind zT nur die vorherige Bestellung

None Schwelle flexibel

1st step none klassifizieren
2nd step alle non-nones fitten

dasselbe kann ich mit allen all machen, alle reordered

so viele none orders in train 0.06555953

vielleicht gibt es ein produkt an dem man promotion zeitraum erkennt, dann kšnnte man bestellungen zeitlich ordnen

I also use the mean and std of cart\dow\hour\days on users, and make the dis of train/test order.

faron - order streak: wie oft am stück geordert

features: 
- recency jv24

users favorite product

Zeittrend: Anzahl der Produkte des Users... abnehmend zunehmend

    User Features: #Products purchased, #Orders made, frequency and recency of orders, #Aisle purchased from, #Department purchased from, frequency and recency of reorders, tenure, mean order size, etc.

    Product Features: #users, #orders, order frequency, reorder rate, recency, mean add_to_cart_order, etc.

    Aisle and Department Features: similar to product features

    user product interaction:#purchases, #reorders, #day since last purchase, #order since last purchase etc.

    User aisle and department interaction: similar to product interaction

    User time interaction: user preferred day of week, user preferred time of day, similar features for products and aisles



1. Product level - 'ratio of train or test day of week to average prior day of week' and 'ratio of train or test hour of day to average prior hour of day' 
2. User level - Same 2 ratios mentioned above. 
3. User-Product level - Same 2 ratios mentioned above.


4. department level - wie viele produkte pro department, wie viel gekauft, wie viel reordered
5. aisle level

user hört auf product zu kaufen... evtl. sowas wie regression...


    df['user_average_days_between_orders'] = df.user_id.map(users.average_days_between_orders)



    print('order related features')
    # df['dow'] = df.order_id.map(orders.order_dow)
    df['order_hour_of_day'] = df.order_id.map(orders.order_hour_of_day)
    df['days_since_prior_order'] = df.order_id.map(orders.days_since_prior_order)
    df['days_since_ratio'] = df.days_since_prior_order / df.user_average_days_between_orders

average days between orders könnte man auch für alle früheren orders machen....

            up_orders_since_last_order = user_orders - up_last_order, auch als percent

    df['UP_delta_hour_vs_last'] = abs(df.order_hour_of_day - df.UP_last_order_id.map(orders.order_hour_of_day)).map(lambda x: min(x, 24-x)).astype(np.int8)


eigene idee: order diversity percentage of products in an order that are from different aisles / departments.

days since prior order 7,14,21, besonders, wöchentlich
days since first order 30 60 90 besonders

seasonality für obst wichtig. auch info da.


wie typisch ist ein produkt für das department... evtl. weniger typische produkte öfter reordered.

wie oft kauft ein kunde eher typische oder eher untypische produkte,
wie oft eher aus typischen untypischen aisles oder deparments

dann noch word2vec versuchen


allgemeine idee: 

- some features based on last order... d.h. zweites modell das immer nur ide vorherige order fitted
- products daten an anderen train-usern schätzen lassen




Expected F1 score to select products
posted in Instacart Market Basket Analysis 8 hours ago
[bronze]

i have been struggling with this to boost my score compared with using fixed threshold. After running my binary model and getting the probs for each possible product i calculate the expected F1 score for each possible combination and select the one with highest expected F1 score. i will give an example

         order_id  product_id      pred  reordered
466492  3416942.0     13424.0  0.131574          0
466493  3416942.0     32538.0  0.178045          0
466494  3416942.0     44683.0  0.401903          0

as you see if i would select the products based on some threshold (0.22) then i would predict the user to reorder product_id 44683 that had probability 0.401903 that would give me a zero F1 score because the ground truth in this case is 'None'. the user didnt reorder any product.

now istead of this i calculated the expected F1 score for each combination (2^3 = 8). i constructed 3 arrays as following:

the possible combinations:

[['None'], [44683.0], [32538.0], [32538.0, 44683.0], [13424.0], [13424.0, 44683.0], [13424.0, 32538.0], [13424.0, 32538.0, 44683.0]]

the probability of each combination (the sum is obviosly 1)

[ 0.42692564,  0.28688152,  0.09247729,  0.06214203,  0.06468263,
        0.04346483,  0.01401105,  0.00941501]

the expected F1 score (8 x 8) array. meaning what is the expected F1 score for combination 1 if the ground truth is combination 1 - 8.

array([[ 1.        ,  0.        ,  0.        ,  0.        ,  0.        ,
         0.        ,  0.        ,  0.        ],
       [ 0.        ,  1.        ,  0.        ,  0.66666667,  0.        ,
         0.66666667,  0.        ,  0.5       ],
       [ 0.        ,  0.        ,  1.        ,  0.66666667,  0.        ,
         0.        ,  0.66666667,  0.5       ],
       [ 0.        ,  0.66666667,  0.66666667,  1.        ,  0.        ,
         0.5       ,  0.5       ,  0.8       ],
       [ 0.        ,  0.        ,  0.        ,  0.        ,  1.        ,
         0.66666667,  0.66666667,  0.5       ],
       [ 0.        ,  0.66666667,  0.        ,  0.5       ,  0.66666667,
         1.        ,  0.5       ,  0.8       ],
       [ 0.        ,  0.        ,  0.66666667,  0.5       ,  0.66666667,
         0.5       ,  1.        ,  0.8       ],
       [ 0.        ,  0.5       ,  0.5       ,  0.8       ,  0.5       ,
         0.8       ,  0.8       ,  1.        ]])

and finaly the expected F1 score for each combination. F1(comb1) = F1(predict comb1|truth comb1) * P(truth is comb1) + F1(predict comb1|truth comb2) * P(truth is comb2)+.... + F1(predict comb1|truth comb8) * P(truth is comb8)

[ 0.42692564,  0.3619936 ,  0.14795351,  0.35131785,  0.10770739,
        0.32344948,  0.17911977,  0.32713006]

and select the combination with highest expected F1 score.

[i for i in combs[np.argmax(d3)]] = ['None']

so using this method i get perfect F1 score of 1. I have checked manually few other examples and i see that this method produce either the same results as the fixed threshold or better (like in the example above). However, when i apply it to all orders with < 10 possible products to reorder from i get worse score than the fixed threshold.

any idea why?

How did you calculate the case of ground truth None? If you calculate as the competition's evaluation metric does, it is not expected F1 by definition. You have to use expected F1 equals zero for that case, i.e., you only sum up all the expectation for the other cases, and treat Nones externally.

However, that raises another issue: in optimizing (the formally defined) F1-score, it is always good to have at least one product in your reordered basket, which is not the case here. Thus...
Sameh Faidi
Sameh Faidi•(24th in this Competition)•a day ago•
Options
•
Reply

P(truth is none) = (1- P(prod1)) * (1-P(prod2)) * (1-P(prod3)) and if you predict None and the ground truth is None then the expected F1 score is P(truth is none)
AlphaMeow
AlphaMeow•(15th in this Competition)•29 minutes ago•
Options
•
Reply

@Sameh Faidi

Yes, I see what you mean. My suggestion is, treating the none case by something else outside F1-score optimization. For F1-expectation, you only calculate the cases where you have at least one product in the basket(i.e., assuming the None case give you F1 value = 0 all the time). 